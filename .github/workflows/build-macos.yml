name: Build other OS Binaries

on:
  release:
    types: [published]

jobs:
  build-mac-os:
    runs-on: 'self-hosted-macos'
    steps:
      - uses: actions/checkout@v4
      - name: "Install Dependencies"
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install python3.12 lua gobject-introspection cairo p7zip wget glib xz
      - name: "Build Archipelago"
        run: |
          python3.12 -m venv venv
          source venv/bin/activate
          python3.12 -m pip install --upgrade pip "PyGObject<3.51.0" charset-normalizer
          python3.12 setup.py build_exe --yes bdist_appimage --yes
          echo -e "setup.py build output:\n `ls build`"
          echo -e "setup.py dist output:\n `ls dist`"
          export TAR_NAME="Archipelago-macOS-Sequoia.tar.gz"
          (cd build && DIR_NAME="`ls | grep exe`" && mv "$DIR_NAME" Archipelago && tar -cv Archipelago | gzip -8 > ../dist/$TAR_NAME && mv Archipelago "$DIR_NAME")
          echo "TAR_NAME=$TAR_NAME" >> $GITHUB_ENV
      - name: Build Again
        run: |
          source venv/bin/activate
          python setup.py build_exe --yes
      - name: Check build loads expected worlds
        shell: bash
        run: |
          cd build/exe*
          mv Players/Templates/meta.yaml .
          ls -1 Players/Templates | sort > setup-player-templates.txt
          rm -R Players/Templates
          timeout 30 ./ArchipelagoLauncher "Generate Template Options" || true
          ls -1 Players/Templates | sort > generated-player-templates.txt
          cmp setup-player-templates.txt generated-player-templates.txt \
            || diff setup-player-templates.txt generated-player-templates.txt
          mv meta.yaml Players/Templates/
      - name: Test Generate
        shell: bash
        run: |
          cd build/exe*
          cp Players/Templates/VVVVVV.yaml Players/
          timeout 30 ./ArchipelagoGenerate
      - name: Store .tar.gz
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TAR_NAME }}
          path: dist/${{ env.TAR_NAME }}
          compression-level: 0  # .gz is incompressible by zip
          if-no-files-found: error
          retention-days: 7
  build-ubuntu2204:
    runs-on: 'self-hosted-linux-arm64'
    steps:
      # - copy code below to release.yml -
      - uses: actions/checkout@v4
      - name: Install base dependencies
        run: |
          sudo apt update
          sudo apt -y install build-essential p7zip xz-utils wget libglib2.0-0
          sudo apt -y install python3-gi libgirepository1.0-dev  # should pull dependencies for gi installation below
      - name: Get a recent python
        uses: actions/setup-python@v5
        with:
          python-version: '~3.12.7'
          check-latest: true
      - name: Install build-time dependencies
        run: |
          echo "PYTHON=python3.12" >> $GITHUB_ENV
          wget -nv https://github.com/AppImage/appimagetool/releases/download/$APPIMAGETOOL_VERSION/appimagetool-aarch64.AppImage
          wget -nv https://github.com/AppImage/type2-runtime/releases/download/$APPIMAGE_RUNTIME_VERSION/runtime-aarch64
          chmod a+rx appimagetool-aarch64.AppImage
          ./appimagetool-aarch64.AppImage --appimage-extract
          echo -e '#/bin/sh\n./squashfs-root/AppRun --runtime-file runtime-aarch64 "$@"' > appimagetool
          chmod a+rx appimagetool
      ## I don't believe this is support on aarch64 so disabling it
      # - name: Download run-time dependencies
      #   run: |
      #     wget -nv https://github.com/Ijwu/Enemizer/releases/download/$ENEMIZER_VERSION/ubuntu.16.04-x64.7z
      #     7za x -oEnemizerCLI/ ubuntu.16.04-x64.7z
      - name: Build
        run: |
          # pygobject is an optional dependency for kivy that's not in requirements
          # charset-normalizer was somehow incomplete in the github runner
          "${{ env.PYTHON }}" -m venv venv
          source venv/bin/activate
          "${{ env.PYTHON }}" -m pip install --upgrade pip "PyGObject<3.51.0" charset-normalizer
          python setup.py build_exe --yes bdist_appimage --yes
          echo -e "setup.py build output:\n `ls build`"
          echo -e "setup.py dist output:\n `ls dist`"
          cd dist && export APPIMAGE_NAME="`ls *.AppImage`" && cd ..
          export TAR_NAME="${APPIMAGE_NAME%.AppImage}.tar.gz"
          (cd build && DIR_NAME="`ls | grep exe`" && mv "$DIR_NAME" Archipelago && tar -cv Archipelago | gzip -8 > ../dist/$TAR_NAME && mv Archipelago "$DIR_NAME")
          echo "APPIMAGE_NAME=$APPIMAGE_NAME" >> $GITHUB_ENV
          echo "TAR_NAME=$TAR_NAME" >> $GITHUB_ENV
      # - copy code above to release.yml -
      - name: Attest Build
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            build/exe.*/ArchipelagoLauncher
            build/exe.*/ArchipelagoGenerate
            build/exe.*/ArchipelagoServer
            dist/${{ env.APPIMAGE_NAME }}*
            dist/${{ env.TAR_NAME }}
      - name: Build Again
        run: |
          source venv/bin/activate
          python setup.py build_exe --yes
      - name: Check build loads expected worlds
        shell: bash
        run: |
          cd build/exe*
          mv Players/Templates/meta.yaml .
          ls -1 Players/Templates | sort > setup-player-templates.txt
          rm -R Players/Templates
          timeout 30 ./ArchipelagoLauncher "Generate Template Options" || true
          ls -1 Players/Templates | sort > generated-player-templates.txt
          cmp setup-player-templates.txt generated-player-templates.txt \
            || diff setup-player-templates.txt generated-player-templates.txt
          mv meta.yaml Players/Templates/
      - name: Test Generate
        shell: bash
        run: |
          cd build/exe*
          cp Players/Templates/VVVVVV.yaml Players/
          timeout 30 ./ArchipelagoGenerate
      - name: Store AppImage
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APPIMAGE_NAME }}
          path: dist/${{ env.APPIMAGE_NAME }}
          if-no-files-found: error
          retention-days: 7
      - name: Store .tar.gz
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TAR_NAME }}
          path: dist/${{ env.TAR_NAME }}
          compression-level: 0  # .gz is incompressible by zip
          if-no-files-found: error
          retention-days: 7
